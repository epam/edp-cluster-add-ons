apiVersion: edp.epam.com/v1alpha1
kind: NexusScript
metadata:
  name: setup-capability
spec:
  execute: true
  content: |
    import groovy.json.JsonSlurper
    import org.sonatype.nexus.capability.CapabilityReference
    import org.sonatype.nexus.capability.CapabilityType
    import org.sonatype.nexus.internal.capability.DefaultCapabilityReference
    import org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry
    parsed_args = new JsonSlurper().parseText(args)
    parsed_args.each {
      it.capability_properties['headerEnabled'] = it.capability_properties['headerEnabled'].toString()
      it.capability_properties['footerEnabled'] = it.capability_properties['footerEnabled'].toString()
      def capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName())
      def capabilityType = CapabilityType.capabilityType(it.capability_typeId)
      DefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference ->
          capabilityReference.context().descriptor().type() == capabilityType
      }
      if (existing) {
          log.info(it.typeId + ' capability updated to: {}',
                  capabilityRegistry.update(existing.id(), existing.active, existing.notes(), it.capability_properties).toString()
          )
      }
      else {
          log.info(it.typeId + ' capability created as: {}', capabilityRegistry.
                  add(capabilityType, true, 'configured through api', it.capability_properties).toString()
          )
      }
    }
  name: setup-capability
  nexusRef:
    kind: Nexus
    name: nexus
  payload: >-
    [
      {
        "capability_typeId": "rutauth",
        "capability_properties": {
          "httpHeader": "X-Forwarded-Preferred-Username"
        }
      }
    ]