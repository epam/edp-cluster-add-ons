{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## OpenSearch Configuration

Before run helm charts you need to prepare a hash password you can read documentation on https://opensearch.org/docs/latest/security/configuration/yaml/ and run "https://github.com/opensearch-project/security/blob/88b6d23f0c84d83f138cf1a61bbe0145d8dd007e/tools/hash.sh" to generate fo use it in values file"CONSULT OpenSearch FOR HASHED PASSWORD".

Ensure that after applying helm charts you have to run in opensearch pod the following command:

```bash
cd /usr/share/opensearch/plugins/opensearch-security/tools/
./securityadmin.sh -cd ../../../config/opensearch-security/ -icl -nhnv \
 -rev \
 -cacert /usr/share/opensearch/config/admin-certs/ca.crt \
 -cert /usr/share/opensearch/config/admin-certs/tls.crt \
 -key /usr/share/opensearch/config/admin-certs/tls.key
```

{{ template "chart.maintainersSection" . }}

## Secret managment

There is two way for creating secret for this add-on: manual by using kubectl command and using External Secret Operator.

<details open>
<summary><b>Kubectl</b></summary>

Run following command to create a secret(s):
```bash
kubectl create secret generic opensearch-dashboards-account \
  --from-literal=username=<username> \
  --from-literal=password=<password> \
  --from-literal=cookie=<cookie> \
  --from-literal=OIDC_CLIENT_SECRET=<OIDC_CLIENT_SECRET>
```

```bash
kubectl create secret generic fluentbit-creds \
  --from-literal=username=<username> \
  --from-literal=password=<password>
```

```bash
kubectl create secret generic keycloak-client-opensearch-secret \
  --from-literal=clientSecret=<clientSecret>
```

```bash
kubectl create secret generic opensearch-admin-creds \
  --from-literal=username=<username> \
  --from-literal=password=<password>
```

</details>

<details>
<summary><b>External Secret Operator</b></summary>

Update [values.yaml](values.yaml) to enable ESO:

```yaml
eso:
  # -- Install components of the ESO.
  enabled: true
```

AWS Parameter Store structure:

```json
{
  "opensearch-dashboard": {
    "username": "<username>",
    "password": "<password>",
    "cookie": "<cookie>",
    "OIDC_CLIENT_SECRET": "<OIDC_CLIENT_SECRET>"
  },
  "fluentbit": {
    "username": "<username>",
    "password": "<password>"
  },
  "opensearch": {
    "username": "<username>",
    "password": "<password>"
  }
}
```

</details>

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}
