atlantis:
  vcsSecretName: atlantis-webhook

  # -- Uncomment to enable Basic Auth mode
  # ref: https://www.runatlantis.io/docs/security.
  # basicAuthSecretName: atlantis-creds

  bitbucket:
    user: auto_example

  atlantisUrl: "atlantis.example.com"

  ingress:
    enabled: true
    path: /
    host: atlantis.example.com

  orgAllowlist: bitbucket.org/organization/*

  defaultTFVersion: "1.5.7"
  repoConfig: |
    ---
    repos:
    - id: /.*/
      allowed_overrides: ["workflow"]
      allow_custom_workflows: true

  serviceAccount:
    annotations: {}
    # annotations:
    #   annotation1: value
    #   annotation2: value
    # IRSA example:
    # annotations:
    #   eks.amazonaws.com/role-arn: role-arn

# This section enables configuration for using External Secrets Operator (ESO) as the secret manager.
# Prerequisite: Ensure that ESO is installed in the cluster.
# Refer to the EDP cluster add-on for ESO installation and setup:
# https://github.com/epam/edp-cluster-add-ons/tree/main/clusters/core/addons/external-secrets
#
# Ensure that you have created the necessary roles for ESO integration.
# Follow the detailed instructions here:
# https://docs.kuberocketci.io/docs/operator-guide/secrets-management/external-secrets-operator-integration#aws-parameter-store-scenario-in-kuberocketci
eso:
  # -- Install components of the ESO.
  enabled: true
  # -- Defines provider type. One of `aws`, `generic`, or `vault`.
  provider: "aws"
  # -- Defines the path to the secret in the provider. If provider is `vault`, this is the path must be prefixed with `secret/`.
  secretPath: "/infra/core/addons/atlantis"
  # -- Vault configuration (if provider is `vault`).
  vault:
    # -- Vault server URL.
    server: "http://vault.vault:8200"
    # -- Mount path for the Kubernetes authentication method.
    mountPath: "core"
    # -- Vault role for the Kubernetes authentication method.
    role: atlantis
  # -- AWS configuration (if provider is `aws`).
  aws:
    # -- AWS region.
    region: "eu-central-1"
    # -- AWS role ARN for the ExternalSecretOperator to assume.
    roleArn: "arn:aws:iam::012345678910:role/AWSIRSA_Shared_ExternalSecretOperatorAccess"
  generic:
    secretStore:
      # -- Defines SecretStore provider configuration.
      providerConfig: {}
      #  gcpsm:
      #    projectID: "alphabet-123"

oauth2-proxy:
  enabled: false
  extraArgs:
    # Skip authentication for /events endpoint to allow Git webhook access
    skip-auth-regex: "^/events$"
  config:
    configFile: |-
      allowed_roles = ["administrator", "developer"]
      client_id = "atlantis"
      code_challenge_method="S256"
      cookie_csrf_expire="5m"
      cookie_csrf_per_request="true"
      cookie_secure = "false"
      email_domains = [ "*" ]
      insecure_oidc_allow_unverified_email = "true"
      oidc_issuer_url = "https://keycloak.example.com/realms/<realm_name>"
      pass_access_token = "true"
      pass_authorization_header = "true"
      pass_basic_auth = "false"
      provider = "keycloak-oidc"
      redirect_url = "https://atlantis.example.com/oauth2/callback"
      skip_jwt_bearer_tokens = "true"
      upstreams = [ "http://atlantis:80" ]
      whitelist_domains = ["*"]
      silence_ping_logging = "true"

    existingSecret: oauth2-proxy

  ingress:
    enabled: true
    hosts:
      - atlantis.example.com

oidc:
  enabled: false
