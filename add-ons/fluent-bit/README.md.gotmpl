{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## Fluentbit Events

This chart integrates Fluent Bit as a log processor and forwarder, specifically configured to capture Kubernetes and CloudEvents from Tekton.
It relies on the KubeRocketCI's OpenSearch chart for log storage and analysis, providing a cohesive logging solution.

+--------+       +-------------+       +------------+       +-----------+
| Tekton +------>+ CloudEvents +------>+ Fluent Bit +------>+ OpenSearch|
+--------+       +-------------+       +------------+       +-----------+
                                             |
                                             |
                                        +----+----+
                                        | k8s     |
                                        | Events  |
                                        +---------+

### Key Features and Configurations:

- **Deployment Mode**: Fluent Bit is deployed as a single instance to efficiently gather events across the cluster.
- **CloudEvents Support**: Custom port configuration (8888) to receive CloudEvents from Tekton Pipelines.
- **RBAC and Access**: Automatically creates RBAC resources with access to Kubernetes events.
- **Elasticsearch Integration**: Environment variables are configured to use credentials from a secret for Elasticsearch access.
- **Monitoring**: A ServiceMonitor is configured for Prometheus scraping, with detailed metric and relabeling configurations.

### Inputs and Outputs:

- **Inputs**: Captures Kubernetes events and HTTP CloudEvents.
- **Outputs**: Configured to forward logs to an OpenSearch cluster with specific formatting and TLS settings.

For further customization and to tailor the Fluent Bit configuration to your needs, please review the `values.yaml` file.

### Calculate duration for PipelineRuns and TaskRuns

To calculate the duration of PipelineRuns and TaskRuns, you can add a scripted field in OpenSearch Dashboards.

Navigate to the **Management** section in OpenSearch Dashboards.
Go to Stack **Management** > **Index Patterns**.
Select the index pattern that contains your data (e.g., logstash-cloudevents-*).
Find and click on the **Scripted fields** tab, then click on **Add scripted field**.
Fill in the **Name** for your field, for example, **duration**.
For the **Language**, ensure that painless is selected.
Set the Script type to **number**.
In the Script field, enter the following code:

```java
long startTimeMillis = 0;
long completionTimeMillis = 0;

// Check for pipelineRun times
if (doc.containsKey('pipelineRun.status.startTime') && !doc['pipelineRun.status.startTime'].empty) {
    startTimeMillis = doc['pipelineRun.status.startTime'].value.getMillis();
}

if (doc.containsKey('pipelineRun.status.completionTime') && !doc['pipelineRun.status.completionTime'].empty) {
    completionTimeMillis = doc['pipelineRun.status.completionTime'].value.getMillis();
}

// Check for taskRun times if pipelineRun times aren't set
if (startTimeMillis == 0 && doc.containsKey('taskRun.status.startTime') && !doc['taskRun.status.startTime'].empty) {
    startTimeMillis = doc['taskRun.status.startTime'].value.getMillis();
}

if (completionTimeMillis == 0 && doc.containsKey('taskRun.status.completionTime') && !doc['taskRun.status.completionTime'].empty) {
    completionTimeMillis = doc['taskRun.status.completionTime'].value.getMillis();
}

// Calculate duration in seconds if both times are available
if (startTimeMillis > 0 && completionTimeMillis > 0) {
    return (completionTimeMillis - startTimeMillis) / 1000;
} else {
    return 0; // Return 0 or some default value if the necessary fields are missing or incomplete
}
```

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}
